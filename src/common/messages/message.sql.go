// Code generated by sqlc. DO NOT EDIT.
// source: message.sql

package messages

import (
	"context"
)

const createMessage = `-- name: CreateMessage :exec
INSERT INTO message (
  phone, body
) VALUES (
  $1, $2
)
`

type CreateMessageParams struct {
	Phone string `json:"phone"`
	Body  string `json:"body"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) error {
	_, err := q.exec(ctx, q.createMessageStmt, createMessage, arg.Phone, arg.Body)
	return err
}

const deleteMessage = `-- name: DeleteMessage :exec
DELETE FROM message
WHERE id = $1
`

func (q *Queries) DeleteMessage(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteMessageStmt, deleteMessage, id)
	return err
}

const getMessages = `-- name: GetMessages :many
SELECT id, phone, body FROM message
WHERE phone = $1
`

func (q *Queries) GetMessages(ctx context.Context, phone string) ([]Message, error) {
	rows, err := q.query(ctx, q.getMessagesStmt, getMessages, phone)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(&i.ID, &i.Phone, &i.Body); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPhones = `-- name: ListPhones :many
SELECT id, phone, body FROM message
ORDER BY phone
`

func (q *Queries) ListPhones(ctx context.Context) ([]Message, error) {
	rows, err := q.query(ctx, q.listPhonesStmt, listPhones)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(&i.ID, &i.Phone, &i.Body); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
